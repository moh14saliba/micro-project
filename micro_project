#include <xc.h>
#include <stdint.h>
#include <stdio.h>

#define _XTAL_FREQ 20000000

// Configuration Bits
#pragma config FOSC = HS
#pragma config WDTE = OFF
#pragma config PWRTE = OFF
#pragma config BOREN = ON
#pragma config LVP = OFF
#pragma config CPD = OFF
#pragma config WRT = OFF
#pragma config CP = OFF

// LCD Pins
#define RS RD2
#define EN RD3
#define D4 RD4
#define D5 RD5
#define D6 RD6
#define D7 RD7

// Function Prototypes
void LCD_Command(unsigned char);
void LCD_Char(unsigned char);
void LCD_Init(void);
void LCD_String(const char*);
void LCD_Clear(void);

void main(void) {
    TRISD = 0x00;
    LCD_Init();

    while (1) {
        LCD_Clear();
        LCD_String("Hello World!");
        __delay_ms(2000);
    }
}

// ========================== LCD Functions ==========================

void LCD_Command(unsigned char cmd) {
    RS = 0;
    D4 = (cmd >> 4) & 1;
    D5 = (cmd >> 5) & 1;
    D6 = (cmd >> 6) & 1;
    D7 = (cmd >> 7) & 1;
    EN = 1; __delay_ms(2); EN = 0;

    D4 = cmd & 1;
    D5 = (cmd >> 1) & 1;
    D6 = (cmd >> 2) & 1;
    D7 = (cmd >> 3) & 1;
    EN = 1; __delay_ms(2); EN = 0;
}

void LCD_Char(unsigned char data) {
    RS = 1;
    D4 = (data >> 4) & 1;
    D5 = (data >> 5) & 1;
    D6 = (data >> 6) & 1;
    D7 = (data >> 7) & 1;
    EN = 1; __delay_ms(2); EN = 0;

    D4 = data & 1;
    D5 = (data >> 1) & 1;
    D6 = (data >> 2) & 1;
    D7 = (data >> 3) & 1;
    EN = 1; __delay_ms(2); EN = 0;
}

void LCD_Init(void) {
    __delay_ms(20);
    LCD_Command(0x02);
    LCD_Command(0x28);
    LCD_Command(0x0C);
    LCD_Command(0x06);
    LCD_Command(0x01);
    __delay_ms(2);
}

void LCD_String(const char *str) {
    while (*str) {
        LCD_Char(*str++);
    }
}

void LCD_Clear(void) {
    LCD_Command(0x01);
    __delay_ms(2);
} 

// Add these at the top with previous Stage 1 code
#define DHT11_PIN RB1
uint8_t temp_int = 0, hum_int = 0;

void DHT11_Start(void);
uint8_t DHT11_CheckResponse(void);
uint8_t DHT11_ReadByte(void);

void main(void) {
    TRISB1 = 1;
    TRISD = 0x00;
    LCD_Init();
    char buffer[16];

    while (1) {
        DHT11_Start();
        if (DHT11_CheckResponse()) {
            hum_int = DHT11_ReadByte();
            DHT11_ReadByte();
            temp_int = DHT11_ReadByte();
            DHT11_ReadByte();
            DHT11_ReadByte();

            LCD_Clear();
            LCD_String("Temp: ");
            sprintf(buffer, "%d C", temp_int);
            LCD_String(buffer);

            LCD_Command(0xC0);
            LCD_String("Hum: ");
            sprintf(buffer, "%d %%", hum_int);
            LCD_String(buffer);
        }
        __delay_ms(1000);
    }
}

// DHT11 Functions
void DHT11_Start(void) {
    TRISB1 = 0;
    DHT11_PIN = 0;
    __delay_ms(18);
    DHT11_PIN = 1;
    __delay_us(30);
    TRISB1 = 1;
}

uint8_t DHT11_CheckResponse(void) {
    uint8_t response = 0;
    __delay_us(40);
    if (DHT11_PIN == 0) {
        __delay_us(80);
        if (DHT11_PIN == 1) response = 1;
        __delay_us(40);
    }
    return response;
}

uint8_t DHT11_ReadByte(void) {
    uint8_t i, byte = 0;
    for (i = 0; i < 8; i++) {
        while (!DHT11_PIN);
        __delay_us(30);
        if (DHT11_PIN == 1)
            byte |= (1 << (7 - i));
        while (DHT11_PIN);
    }
    return byte;
}
