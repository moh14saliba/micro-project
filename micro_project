#include <xc.h>
#include <stdint.h>
#include <stdio.h>

#define _XTAL_FREQ 20000000  // Define the clock frequency (20 MHz)

// Configuration Bits for PIC16F877A
#pragma config FOSC = HS     // High-speed oscillator
#pragma config WDTE = OFF    // Watchdog timer disabled
#pragma config PWRTE = OFF   // Power-up timer disabled
#pragma config BOREN = ON    // Brown-out reset enabled
#pragma config LVP = OFF     // Low-voltage programming disabled
#pragma config CPD = OFF     // Data EEPROM code protection off
#pragma config WRT = OFF     // Flash program memory write protection off
#pragma config CP = OFF      // Code protection off

// LCD Control Pins connected to PORTD
#define RS RD2
#define EN RD3
#define D4 RD4
#define D5 RD5
#define D6 RD6
#define D7 RD7

// Sensor and output pins on PORTB
#define DHT11_PIN RB1    // Digital data pin from DHT11 sensor

#define RED_LED    RB0   // Red LED for high temp warning
#define YELLOW_LED RB2   // Yellow LED for medium temp warning
#define GREEN_LED  RB3   // Green LED for safe temp
#define BUZZER     RB4   // Buzzer output
#define PUMP       RB6   // Water pump control output

// Soil moisture threshold (adjust according to calibration)
#define SOIL_MOISTURE_THRESHOLD 700

// Function prototypes
void LCD_Command(unsigned char cmd);
void LCD_Char(unsigned char data);
void LCD_Init(void);
void LCD_String(const char *str);
void LCD_Clear(void);
void beep(void);

void DHT11_Start(void);
uint8_t DHT11_CheckResponse(void);
uint8_t DHT11_ReadByte(void);

unsigned int ADC_Read(unsigned char channel);

// Global variables to hold sensor data
uint8_t temp_int = 0, hum_int = 0;
unsigned int soil_moisture = 0;

void main(void) {
    // ======= Setup pins direction =======
    TRISB1 = 1;      // Set RB1 as input for DHT11 data
    TRISB0 = 0;      // Set RB0 as output for Red LED
    TRISB2 = 0;      // Set RB2 as output for Yellow LED
    TRISB3 = 0;      // Set RB3 as output for Green LED
    TRISB4 = 0;      // Set RB4 as output for Buzzer
    TRISB6 = 0;      // Set RB6 as output for Pump control
    TRISA = 0xFF;    // Set PORTA as input for ADC (soil sensor on AN0)
    TRISD = 0x00;    // Set PORTD as output for LCD control/data pins

    // ======= Initialize all outputs to OFF =======
    RED_LED = 0;
    YELLOW_LED = 0;
    GREEN_LED = 0;
    BUZZER = 0;
    PUMP = 0;

    // ======= Initialize LCD and give some startup delay =======
    LCD_Init();
    __delay_ms(1000);

    // ======= Welcome message and buzzer beep =======
    LCD_Clear();
    LCD_String("Welcome to");
    LCD_Command(0xC0);  // Move to second line
    LCD_String("happy farm!");
    for (int i = 0; i < 3; i++) {
        beep();          // Buzzer beep function
        __delay_ms(500); // Pause between beeps
    }

    char buffer[16]; // Buffer for text display

    // ======= Main program loop =======
    while(1) {
        // --- Read temperature and humidity from DHT11 ---
        DHT11_Start();            // Send start signal to DHT11
        if (DHT11_CheckResponse()) {  // Check if DHT11 responds
            hum_int = DHT11_ReadByte();   // Read humidity integer part
            DHT11_ReadByte();             // Ignore decimal humidity
            temp_int = DHT11_ReadByte();  // Read temperature integer part
            DHT11_ReadByte();             // Ignore decimal temperature
            DHT11_ReadByte();             // Ignore checksum
        }

        // --- Read soil moisture sensor analog value via ADC ---
        soil_moisture = ADC_Read(0); // Read analog channel 0 (AN0)

        // --- Display temperature and humidity on LCD first line ---
        LCD_Clear();
        sprintf(buffer, "T:%dC H:%d%%", temp_int, hum_int);  // Format string
        LCD_String(buffer);

        // --- Display soil moisture status on LCD second line ---
        LCD_Command(0xC0);  // Move cursor to second line
        LCD_String("Soil:");
        if (soil_moisture > SOIL_MOISTURE_THRESHOLD) { // If soil is dry
            LCD_String("Dry  ");
            PUMP = 1;       // Turn pump ON to water plants
        } else {
            LCD_String("Wet  ");
            PUMP = 0;       // Turn pump OFF
        }

        // --- Control LEDs and buzzer based on temperature ---
        if (temp_int < 25) {
            GREEN_LED = 1;    // Safe temp — green LED ON
            YELLOW_LED = 0;
            RED_LED = 0;
            BUZZER = 0;
        } else if (temp_int == 25) {
            GREEN_LED = 0;
            YELLOW_LED = 1;   // Warning temp — yellow LED ON
            RED_LED = 0;
            BUZZER = 0;
        } else {
            GREEN_LED = 0;
            YELLOW_LED = 0;
            RED_LED = 1;      // High temp — red LED ON
            BUZZER = 1;       // Buzzer sounds warning
        }

        __delay_ms(1000); // Wait 1 second before next reading
    }
}

// ======= Buzzer beep function =======
void beep(void) {
    BUZZER = 1;        // Turn buzzer ON
    __delay_ms(200);   // Wait 200 milliseconds
    BUZZER = 0;        // Turn buzzer OFF
}

// ======= ADC Read function =======
unsigned int ADC_Read(unsigned char channel) {
    ADCON0 = (channel << 2) | 1;  // Select ADC channel and enable ADC
    ADCON1 = 0x80;                // Right justify result, Vref=VDD
    __delay_ms(2);                // Acquisition time to sample
    ADCON0bits.GO = 1;            // Start ADC conversion
    while (ADCON0bits.GO);        // Wait for conversion to finish
    return ((ADRESH << 8) + ADRESL); // Return 10-bit result
}

// ======= DHT11 Sensor Start Signal =======
void DHT11_Start(void) {
    TRISB1 = 0;     // Set pin as output
    DHT11_PIN = 0;  // Pull low for 18 ms to start communication
    __delay_ms(18);
    DHT11_PIN = 1;  // Pull high for 20-40 us
    __delay_us(30);
    TRISB1 = 1;     // Set pin as input to read data
}

// ======= DHT11 Sensor Response Check =======
uint8_t DHT11_CheckResponse(void) {
    uint8_t response = 0;
    __delay_us(40);
    if (DHT11_PIN == 0) {     // Sensor pulls low to acknowledge
        __delay_us(80);
        if (DHT11_PIN == 1)   // Then pulls high
            response = 1;
        __delay_us(40);
    }
    return response;
}

// ======= Read one byte (8 bits) from DHT11 =======
uint8_t DHT11_ReadByte(void) {
    uint8_t i, byte = 0;
    for (i = 0; i < 8; i++) {
        while (!DHT11_PIN);        // Wait for pin to go HIGH
        __delay_us(30);
        if (DHT11_PIN == 1)
            byte |= (1 << (7 - i)); // Set bit if signal is HIGH
        while (DHT11_PIN);         // Wait for pin to go LOW
    }
    return byte;
}

// ======= LCD command function (send command to LCD) =======
void LCD_Command(unsigned char cmd) {
    RS = 0;                      // Command mode
    D4 = (cmd >> 4) & 1;         // Send high nibble
    D5 = (cmd >> 5) & 1;
    D6 = (cmd >> 6) & 1;
    D7 = (cmd >> 7) & 1;
    EN = 1;
    __delay_ms(2);
    EN = 0;

    D4 = cmd & 1;                // Send low nibble
    D5 = (cmd >> 1) & 1;
    D6 = (cmd >> 2) & 1;
    D7 = (cmd >> 3) & 1;
    EN = 1;
    __delay_ms(2);
    EN = 0;
}

// ======= LCD character function (send char to LCD) =======
void LCD_Char(unsigned char data) {
    RS = 1;                      // Data mode
    D4 = (data >> 4) & 1;        // Send high nibble
    D5 = (data >> 5) & 1;
    D6 = (data >> 6) & 1;
    D7 = (data >> 7) & 1;
    EN = 1;
    __delay_ms(2);
    EN = 0;

    D4 = data & 1;               // Send low nibble
    D5 = (data >> 1) & 1;
    D6 = (data >> 2) & 1;
    D7 = (data >> 3) & 1;
    EN = 1;
    __delay_ms(2);
    EN = 0;
}

// ======= LCD initialization =======
void LCD_Init(void) {
    __delay_ms(20);
    LCD_Command(0x02);  // Initialize LCD in 4-bit mode
    LCD_Command(0x28);  // 2 lines, 5x8 font
    LCD_Command(0x0C);  // Display on, cursor off
    LCD_Command(0x06);  // Increment cursor
    LCD_Command(0x01);  // Clear display
    __delay_ms(2);
}

// ======= LCD string function (display string on LCD) =======
void LCD_String(const char *str) {
    while (*str) {
        LCD_Char(*str++);
    }
}

// ======= Clear LCD screen =======
void LCD_Clear(void) {
    LCD_Command(0x01);  // Clear display command
    __delay_ms(2);
}
